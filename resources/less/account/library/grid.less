/**
* Grid
*/

// Set responsive CSS variables
each(#config.grid()[@gutter], {
	#media.query(@key, {
		.row {
			--gutter: @value;
		}
	})
});


#grid() {
	
	// Create helper classes
	.classes() {
		@config: #config.grid();
		
		/**
		* Row
		*/
		.row {
			display: -webkit-flex;
			display: -ms-flexbox;
			display: flex;

			-webkit-box-direction: normal;
			-webkit-box-orient: horizontal;

			-webkit-flex-direction: row;
			-ms-flex-direction: row;
			flex-direction: row;

			-webkit-flex-wrap: wrap;
			-ms-flex-wrap: wrap;
			flex-wrap: wrap;

			clear: both;

			//init value, otherwise single item order: 1 appears last.
			order: 1000; 

			// Default negative gutter to compensate for padding of first and last col
			margin-left: calc( var(--gutter) / -2 );
			margin-right: calc( var(--gutter) / -2 );
		}


		/**
		* Columns
		*/
		.row > [class*="col"] {

			height: auto;	

			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: flex;

			-webkit-box-flex: 0 1 auto;
			-webkit-flex: 0 1 auto;
			-ms-flex: 0 1 auto;
			flex: 0 1 auto;

			margin-right: -0.1px; // workaround for IE, otherwise last col won't fit (weird)

			-webkit-box-direction: column;
			-webkit-box-orient: vertical;
			-webkit-flex-direction: column;
			-ms-flex-direction: column;
			flex-direction: column;

			// init value, otherwise single item order: 1 appears last.
			order: 1000;

			// Column gutter
			padding-left:  calc( var(--gutter) / 2 );
			padding-right:  calc( var(--gutter) / 2 );
		}


		/**
		* Column width
		*/
		each(range(12), {
			.row >.col-@{value} {
				@width: ~"calc( 100% * @{value} / 12 )";
				width: @width;
				max-width: @width;
			}
		});
  

		/**
		* Media xs: all cols to 100% 
		*/
		@media @xs {
			.row > [class*="col"] {
				width: 100%;
				max-width: 100%;
				flex-basis: auto!important;
			}
			// except auto-xs
			.row > .col-auto-xs {
				width: auto;
				_max-width: initial;
				-webkit-flex: 0 0 auto!important;
				-ms-flex: 0 0 auto!important;
				flex: 0 0 auto!important; 
			}
		}
		
		
		/**
		*  Col widths for each override, wrapped in a mediaquery
		*/
		@overrides: xl lg md sm lg-down md-down sm-down lg-up md-up sm-up xs; //to do, order is important to let this work
		each(@overrides, {
			#media.query(@value, {
				each(range(12), .(@col) {
					.row >.col-@{col}-@{value} {
						@width: ~"calc( 100% * @{col} / 12 )";
						width: @width;
						max-width: @width;
					}
				});
			})
		});
		

		/**
		* Col-auto shrinks col width to content
		*/
		.row > .col-auto {
			-webkit-flex: 0 0 auto;
			-ms-flex: 0 0 auto;
			flex: 0 0 auto; 
		}


		/**
		* Col-0 has no width
		*/
		.row > .col-0 {
			width: 0;
		}

		
		/**
		* No width, but fills row evenly with other .col's
		*/
		.row > .col {
			-webkit-flex-grow: 1;
			-ms-flex-grow: 1;
			flex-grow: 1;

			-webkit-flex-basis: 0;
			-ms-flex-basis: 0;
			flex-basis: 0;
		}
	}
}